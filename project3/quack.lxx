%top{
/* Quack scanner
 * Author: Andrew Letz
 * Acknowledgements: Michal Young for skeleton file
 */ 

#include "quack.tab.hxx"  /* Generated by bison. */
#include "Messages.h"
%}

%{
/* Externally visible file name --
* for error messages.
* FIXME: Need to extract this from structures that reflex passes
* or else find another way to dig it out.
*/
std::string yyfilename = "Quack";

/* Some strings can't be matched in one gulp.  We need
 * a buffer in which to assemble them from parts.
 */
std::string string_buf = "";

void yyerror (const std::string &msg, yy::position* where) {
     std::cout << where << ": " << msg;
}

std::string BAD_ESC_MSG =
  "Illegal escape code; only \\\\, \\0, \\t, \\n, \\r, \\n are permitted";

%}


%option bison-cc bison-locations noyywrap
%option namespace=yy lexer=Lexer lex=yylex

  /* Scanner States */

%x comment
%x string
%x multistring

%%

  /* Non-value bearing tokens 
   (the parser needs to know only which token was matched.) */

  /* Multi-character punctuation with names */
==    { return parser::token::EQUALS; }
[<]=  { return parser::token::ATMOST; }
[>]=  { return parser::token::ATLEAST; }


   /* Single character punctuation.  Because a character
    * in C or C++ can be treated as an integer, Bison lets
    * us return a character as a token.
    * JFlex/Cup do not let you do this in Java.
    * Here are a few ... there are more. 
    */
[-+*/><{}=(),;.:]  { return text()[0]; }

  /* Keywords are essentially another kind of punctuation,
   * but since they also match the identifier pattern, we
   * need to be sure we give their patterns *before* the
   * identifier pattern.  Most scanner generators work this
   * way, but WARNING for Python PLY users:  PLY prioritizes
   * by length of the regular expression!
   * Here are a couple of examples. 
   */

class  { return parser::token::CLASS; }
def  { return parser::token::DEF; }
extends  { return parser::token::EXTENDS; }
if  { return parser::token::IF; }
elif  { return parser::token::ELIF; }
else  { return parser::token::ELSE; }
while  { return parser::token::WHILE; }
return  { return parser::token::RETURN; }
typecase  { return parser::token::TYPECASE; }
and  { return parser::token::AND; }
or  { return parser::token::OR; }
not  { return parser::token::NOT; }

   /* The following tokens are value-bearing:
    * We pass a value back to the parser by copying
    * it into the yylval parameter.  The parser
    * expects string values for identifiers and
    * string literals in yylval.str.  It expects integer
    * values for integer literals in yylval.num.
    * I'll give pattern for integer literals.
    * You'll need another for identifiers.  Remember to
    * 'strdup' the value returned by 'text()', or else it will
    * be clobbered by subsequent calls. 
    */

  /* Int literals*/
[0-9]+         { yylval.num = atoi(text()); return parser::token::INT_LIT; }

  /* Identifiers*/
[a-zA-Z_][a-zA-Z_0-9]*         { yylval.str = strdup(text()); return parser::token::IDENT; }

  /* Strings literals*/
\"  { string_buf.clear(); start(string); }
<string>\"    { start(INITIAL); yylval.str = strdup(string_buf.c_str()); return parser::token::STRING_LIT; }
<string>\n    { start(INITIAL); 
    report::error("Possible unclosed string " +
    std::string(" at line ") + std::to_string(lineno()) +
    ", column " + std::to_string(columno())); }
<string>\\[^0btnrf\"\\]    { report::error(BAD_ESC_MSG +
    std::string(" at line ") + std::to_string(lineno()) +
    ", column " + std::to_string(columno())); }
<string>\\0    { string_buf.append("\0"); }
<string>\\b    { string_buf.append("\b"); }
<string>\\t    { string_buf.append("\t"); }
<string>\\n    { string_buf.append("\n"); }
<string>\\r    { string_buf.append("\r"); }
<string>\\f    { string_buf.append("\f"); }
<string>\\\"    { string_buf.append("\""); }
<string>\\\\    { string_buf.append("\\"); }
<string>.     { string_buf.append(text()); }

\"\"\" { string_buf.clear(); start(multistring); }
<multistring>\"\"\"    { start(INITIAL); yylval.str = strdup(string_buf.c_str()); return parser::token::STRING_LIT; }
<multistring>\n  { string_buf.append("\n"); }
<multistring>\r  { string_buf.append("\r"); }
<multistring>\t  { string_buf.append("\t"); }
<multistring>.     { string_buf.append(text()); }

  /* You *can* write a one-line regular expression for matching a quoted string,
   * but you probably can't read it.  (I can't read mine.)  Scanner states and
   * simpler patterns are probably a better idea.
   * You almost certainly scanner states for triple quotes.
   * The tricky bit is catching errors, such as disallowed escape sequences
   * and unclosed quotes.
   */ 
  /* Ignore whitespace */
[ \r\t\n]*  { ; }

  /* Single line comments */
"//".*  { ; }

   /* Multi-line comments */ 
[/][*]  { start(comment); }
<comment>[^*]*   { ; }
<comment>[*][^/] { ; }
<comment>[*][/]  { start(INITIAL); }

.  {   report::error("Unexpected character '" + std::string(text()) + "'" +
       " at line " + std::to_string(lineno()) +
       ", column " + std::to_string(columno()));
   }

<<EOF>>  { return EOF; }

%%

/* No main program here */ 

