class Stmts(carg: Int) extends Obj {
      // true = false; // type error
      // false = true; // type error
      ast : Int = 10;
      foo = Foo();
      this.children = 10;
      this.children = 20;
      foo.findmax(this.children).weight = 42;
      x = this.mthd().bar();
      
      this.ples = Ples(100);
      this.weight = foo.findmax(this.children).weight;
   
      if (x == 10) { 
         this.t = "hello"; // init before use error
      } else {
         this.t = "harlo";
      }

      z = 10;
      w = 10;
      t = 10;
      if (z == 100) { 
         n = 10;
      } elif (w == 20) {
         u = "test";
      } else {
         p = "yes";
      }

      y = 10;
      while (y == 20 and z == 100 or t == "t") {
         c = "self";
      }

      plem = 10;
      plem;

      // not_init; // init before use error

      clor = "esto";
      clor = 1;

      clem = 10;
      smut : Nothing = whocares(x, y, z);
      schmeech : Int = 10 * 10 * 20 * 50 / 100;

      q = 10;
      e = 10;
      r = 10;
      b = 10;
      clormo = smut.bar(q, w, e, r, t);
      // smut(y, u, "50", 105); // init before use error

      plumb : clest = clest(this.ples.far(y, z), "pleembee"); 

      return plumb.far(t, b);

      def mthd() : C {
         return C(100);
      }

      def whocares(x: Int, y: Int, z: Int) { 
         glarp = 10; 
         m = method(this); 
         z = this; 
      }
}

class Ples(y: Int) {
   this.y = y;
}

class C(x: Int) {
   this.weight = x;

   def bar() : Int {
      return 10;
   }
}

class Foo() {
   def findmax(x: Int) : C {
      return C(x);
   }
}