#include "lex.yy.h"
#include "ASTNode.h"
#include "EvalContext.h"
#include "Messages.h"
#include "typechecker.h"
#include <fstream>

class Driver {
  public:

    // Constructor -
    //    reflex::Input : used to create the lexer, which feeds tokens to the parser 
    //    parser        : defined in  quack.tab.hxx & cxx. arguments defined in quack.yxx.
    //    lexer         : used to override the default lexer in bison (yylex) when parsing
    //    &root         : given to the parser and initialized to the root ASTNode when parsing.
    //                    used to pass the ASTNode back here.

    explicit Driver(reflex::Input in) : lexer(in), parser(new yy::parser(lexer, &root)) {
        root = nullptr;
    }

    // Destructor
    virtual ~Driver() { delete parser; }

    // parse: attempts to parse the given program (tokenized by input lexer).
    //        root is an ASTNode ** in quack.yxx, used to pass the root back here.
    AST::ASTNode* parse() {
        parser->set_debug_level(0); // 0 = no debugging, 1 = full tracing

        // parse() is defined by Bison. 0 = parse success
        int result = parser->parse();
        if (result == 0 && report::ok()) {
            if (root == nullptr) {
                std::cout << "\033[1;35mRoot really shouldn't be null here.\033[0m\n";
            }
            return root; // program was legal
        } else {
            return nullptr; // if the parse fails, we don't want an AST
        }
    }

  private:
    // yy::Lexer is generated by RE\flex, located inside lex.yy.h & cpp.
    // It takes a reflex::Input, and an ostream, which defaults to std::cout.
    yy::Lexer lexer;
    yy::parser *parser; // our parser class generated by Bison and holds our parse() function
    AST::ASTNode *root;

};

void printUsage() {
    std::cout << "\033[1;31mUsage: ./qcc [filename].qk\n";
    std::cout << "*use flag: --json=true for JSON output\033[0m\n";
}

int main(int argc, char *argv[]) {
    if (argc > 3) {
        std::cout << "\033[1;31mInvalid number of arguments.\033[0m\n";
        printUsage();
        exit(1);
    }

    std::string filename;
    bool json = false;

    // Get our filename arg and optional json flag
    for (int i = 1; i < argc; i++) {
        if (std::strcmp(argv[i], "--json=true") == 0) {
            json = true;
        } else {
            filename = std::string(argv[i]);
        }
    }

    // Open file to pass to Driver
    std::ifstream file;
    file.open(filename);

    if (!file.is_open()) {
        std::cout << "\033[1;31mInvalid file \"" << filename << "\"\033[0m\n";
        printUsage();
        exit(1);
    }

    Driver driver(file);
    
    // Parse and get AST into *root
    AST::ASTNode* root = driver.parse();
    if (root != nullptr) {
        AST::AST_print_context context;

        if (json) {
            root->json(std::cout, context);
            std::cout << std::endl;
        } 

        Typechecker typeChecker(root);
        
    } else {
        // either the parse has failed, or no AST was built.
        std::cout << "\n\033[1;31mCompilation failed: AST could not be generated\033[0m\n";
    }
    file.close();
}