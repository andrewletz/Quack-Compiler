/*
need:
- calls
- typecase
*/
/*
class R() {
	def z() {}
}

class B(x: Boolean) {}

class Zoo(x: Int) {}


class A(x: Int) {
	this.instancevar = "10";
}
################################################ */ 
class B(){}

class C(x: Int) {
     this.weight = x;
     def cMethod() : Int { return 10; }
}

class Foo() {
	 this.weight = 1;
     def findmax(x: Int) : C { return C(x); }
}


class Tons(a: Int, b: Int, c: Int, d: Int) {}

class Ples(s: String) {
    this.s = s;     // field with same name as argument
}

class Zmeo() {
    foo = Foo();
    this.children = 10;
    

    //foo.findmax(1, 2, 3, this.children, "hello", B());
    foo.findmax(this.children).weight = 42; 
    this.weight = foo.findmax(this.children).weight;
    
    x = this.createNewC(1).cMethod();
    // use of logical operators
    one = 1;
    two = 2;
    three = 3;
    greeting = "hello";
    not_true = false;
    c = "before_while";
    this.glarpy = this.createNewC(one);
    bool : Boolean = one == two and two == one;
    /*while (one == 1 and two == 2 and not not_true or greeting == "heylo" and three == 3) {
        c = "after_while";
        not_true = true;
        three = 4;      // should no longer be in the loop
    }
    */
    c.PRINT(); // should print "after_while"

    def identity(t: Zmeo) : Zmeo { return t; }

    def createNewC(x: Int) : C { return C(100); }

    def thisTester() {
        this_again = this.identity(this); 
        this_again_again = this; 
    }
}



/* ################################################
	// Old tests

	//tons = Tons("a", 1, 2, 3);

    //thisZmeo = this.identity(Zmeo());

	class I() {
		this.he = 10;
	}

	class W() {
		this.she = I();
	}

	class Y() {
		this.her = W();
		def b() {}
	}
	this.bleep : String = "aa";
	bool = true;

	a = 1;
	b = 2;
	c = 3;
	d = 4;

	bar = Bar(a, b).z(a, b);
	zoo = Zoo(10);
	r = R();
	bee = B(true);
	foo = Foo(a, b, c, d);	
	//t = Foo(z(10), z(20), Smeo("a").z(10), 5);

	while (bool and bool or bool) {}

	//foo = Foo();
	//foo.findmax(this.children).weight = 42;
	//this.weight = foo.findmax(this.children).weight;
	//x = this.createNewC().cMethod();

	def z(b: Int) : Int {
		za = "hello";
		return 10;
	}

	if (true) {
	    x = 10;
	    z = 10;
	    if (x == z) {
	        t = x;
	        if (true) {
	        	z = "hello";
	        }
	    } else {
	    	z = Otherclass();
	    }
	    ggg = 20;
	    zzz = z;
	}

	this.x = 10;
	y = this.x;

	newa = A(10);
	z = newa.instancevar;

	hh = A(y).instancevar;
	bool = true;

	a = 1;
	b = 2;
	c = 3;
	d = 4;

	bar = Bar(a, b).z(a, b);
	zoo = Zoo(10);
	r = R();
	bee = B(true);
	foo = Foo(a, b, c, d);	

	him = Y();
	//teee = him.b().z.ar;
	xxxx = him.her.she.he;
	bleep = him.her;
	x = Y().her.she.he;

	him = Y();
	//x = him.her.she.he;

	def giveMeAnI() : I {
		ttt = Y().her.she;
		return ttt;
	}
*/